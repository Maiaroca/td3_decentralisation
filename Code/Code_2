# Imports
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from flask import Flask, request, jsonify
import numpy as np

# Load and preprocess the Iris dataset
data = load_iris()
X, y = data.data, data.target

# Standardize the dataset
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Convert data to PyTorch tensors
X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
X_test_tensor = torch.tensor(X_test, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.long)
y_test_tensor = torch.tensor(y_test, dtype=torch.long)

# Define the neural network model
class IrisNetV2(nn.Module):
    def __init__(self, input_size, hidden_size1, hidden_size2, num_classes):
        super(IrisNetV2, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size1)
        self.relu1 = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size1, hidden_size2)
        self.relu2 = nn.ReLU()
        self.fc3 = nn.Linear(hidden_size2, num_classes)

    def forward(self, x):
        x = self.fc1(x)
        x = self.relu1(x)
        x = self.fc2(x)
        x = self.relu2(x)
        x = self.fc3(x)
        return x

# Model parameters
input_size = X.shape[1]
hidden_size1 = 16
hidden_size2 = 8
num_classes = len(np.unique(y))

# Initialize model, loss, and optimizer
model = IrisNetV2(input_size, hidden_size1, hidden_size2, num_classes)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.01)

# Training loop
epochs = 100
for epoch in range(epochs):
    model.train()
    optimizer.zero_grad()
    outputs = model(X_train_tensor)
    loss = criterion(outputs, y_train_tensor)
    loss.backward()
    optimizer.step()

    if (epoch + 1) % 10 == 0:
        print(f"Epoch [{epoch + 1}/{epochs}], Loss: {loss.item():.4f}")

# Flask API
app = Flask(__name__)

# Define prediction route
@app.route('/predict', methods=['GET'])
def predict():
    try:
        sepal_length = float(request.args.get('sepal_length'))
        sepal_width = float(request.args.get('sepal_width'))
        petal_length = float(request.args.get('petal_length'))
        petal_width = float(request.args.get('petal_width'))

        # Preprocess input
        input_data = scaler.transform([[sepal_length, sepal_width, petal_length, petal_width]])
        input_tensor = torch.tensor(input_data, dtype=torch.float32)

        # Make prediction
        model.eval()
        with torch.no_grad():
            outputs = model(input_tensor)
            probabilities = torch.softmax(outputs, dim=1).numpy().flatten()
            predicted_class = np.argmax(probabilities)
            class_name = data.target_names[predicted_class]

        # Response
        return jsonify({
            "prediction": class_name,
            "probabilities": {data.target_names[i]: float(probabilities[i]) for i in range(len(data.target_names))}
        })
    except Exception as e:
        return jsonify({"error": str(e)})

# Run the server
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5001)
